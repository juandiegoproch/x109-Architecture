._start (0)
 LLS R0 2
 LMS R0 0
 LLS R1 1
 LMS R1 0
 ADD R2 R1 R0, 2+1
 SUB R2 R1 R0, 2-1
 LOR R2 R1 R0, 2 or 1: 3
 INC R2: 4
 DEC R2: 3
 NOT R2 R0: FF
 MOV R2 R0: 0
 NOT SP R0: FF // initialize stack!
 PUSH R1 1: PUSH 2 (use s to confirm)
 POP R1 1: POP 3 
 LLS ML 64
 STH SP 4
 LDH R0 4
 STH SP -4
 LDH R2 -4
 LLS SP 64
 LMS SP 0
 STST SP 4
 LDST R0 4
 STST SP -4
 LDST R0 -4
 PUSH ZR;

 .loop_while_ml_geq_r0: (26)
 POP R0
 INC R0
 PUSH R0
 SET JR .loop_while_ml_geq_r0
 BNE ML R0; R0 - ML

 ._exit_with_code_r0 (30)
 NOT ML ZR, ML = FFFF
 STH R0 0 // exit code on R0